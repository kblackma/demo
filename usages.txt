Basic Git Steps
1.git clone. This basically tells your local git to go out an pull the files from the server.
2.Make your changes.
3.git commit. This commits your files to your LOCAL repository, not the one on the server.
4.git push. This “pushes” you committed changes up to the server.

### one time command
git init
git config --global user.name "Kevin Blackman"
git config --global user.email kevin@kevinblackman.com
## create a .gitignore file that contains the files and directories/ that
## you want git to ignore
# add all files to the directory
git add . 
# or automatically commit all changed files
git commit -a 
# commit files pending commit change
git commit 
#The identity used for this commit is wrong, you can fix it with:
git commit --amend --author='Kevin Blackman <kevin@kevinblackman.com>'
### one time command:
git remote add origin git@github.com:kblackma/demo_app.git
### one time:
git push origin master
## afterwards just use
git push

### necessary ruby packages
gem install rails
gem install sqlite3-ruby 
### ruby getting started : http://guides.rubyonrails.org/getting_started.html
### ruby script/generate controller home index


##install heroku
gem install heroku
## add your SSH keys to your heroku account
heroku keys
# creates a new app on heroku
heroku create 
# use an existing app

## HEROKU
heroku create
if heroku create does not create the remote then use
git remote add heroku git@heroku.com:appname.git where <appname> is the name of the app in Heroku
gem install taps
heroku db:push

### generate controller name "home" with "index" action
script/generate controller home index 
rm public/index.html 
notepad app/views/home/index.html.erb
### add this above default route : 
map.root :controller => "home"  ## above map.connect

### run server:
ruby script/server

## scaffold generation
script/generate scaffold User name:string email:string
rake db:migrate

##heroku
git push git@heroku.com:dealontheway.git master
git mv <filename1> <filename2>

### scaffold generation scripts

script/generate scaffold User name:string email:string
rake db:migrate

ruby script/generate scaffold Deal name:string content:string exp_date:date showclaimed:boolean user_id:integer
rake db:migrate

### has_many :class_name(s) // belongs_to :class_name



## going to a new branch to create static pages
git checkout -b static-pages
script/generate controller Pages home contact


## install testing framework
gem install rspec
gem install rspec-rails
ruby script/generate rspec
gem install autotest-rails -v 4.1.0
## you can try installing growl to work with autotest -  but complicated on windows
 script/generate rspec_controller Pages home contact
## remove unit tests directory
rm -rf tests
## running the tests
spec spec\  ## runs all the tests
spec spec/controllers/   ## runs the controllers tests
autospec ## run tests continually


$ git add .
$ git commit -am "Done with static pages"
$ git checkout master
$ git merge static-pages

### create simple new user controller
$ script/generate rspec_controller Users new

$ spec spec/
$ git add .
$ git commit -am "Finished layout and routes"
$ git checkout master
$ git merge filling-in-layout
$ git push
$ git push heroku

gitk --all  #view source control graph

$ script/generate rspec_model User name:string email:string

# this drops the table!
$ rake db:rollback

## annotate models
$ gem install annotate-models -v 1.0.4
# annotates the users model
$ annotate users 

## Making the name and email  attributes accessible.
attr_accessible :name, :email

## sandbox
$ script/console --sandbox
## tail the log in the cygwin bash shell
tail -f log/development.log

user = User.new(:name => "User 1", :email => "user1@dealontheway.com")
User.create(:name => "A Nother", :email => "another@dealontheway.com")
## update_attributes performs the update and save in one step
user.update_attributes(:name => "User 1", :email => "user1dude@dealontheway.com")
user.valid?
user.errors.full_messages
spec/models/user_spec.rb

## removed the --colour option from spec\spec.opts

### ensures that the data model from the development database, db/development.sqlite3, 
is reflected in the test database, db/test.sqlite3. 
$ rake db:test:prepare

## so that autotest will use RSPEC
set RSPEC=true
autotest

script/generate migration add_email_uniqueness_index
rake db:migrate

## development is the default environment
script/console test # development etc.
Rails.env, Rails.env.development? etc.
script/server --environment production  ## runs server in production mode, not development

$ script/generate migration add_password_to_users encrypted_password:string

rake db:migrate
rake db:test:prepare

spec spec/models/user_spec.rb -e "should have an encrypted password attribute"

gem install factory_girl -v 1.2.3

gem install faker -v 0.3.1

## development environment is the default. To run the server in production:
script/server --environment production
## to run the console in a different environment
script/console test
## create a production database
rake db:migrate RAILS_ENV=production


### installting to use SQL server
gem install activerecord-sqlserver-adapter 